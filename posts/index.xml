<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Aleksandr Mikoff's blog</title><link>https://mikoff.github.io/posts/</link><description>Recent content in Posts on Aleksandr Mikoff's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2020 19:30:00 +0300</lastBuildDate><atom:link href="https://mikoff.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Point cloud alignment using Lie algebra machinery</title><link>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</link><pubDate>Mon, 27 Jul 2020 19:30:00 +0300</pubDate><guid>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</guid><description>Point cloud alignment using Lie algebra machinery Special Orthogonal group and vectorspaces Today I would like to cover the importance of Lie groups to the problems, that often arises in robotics field. The pose of the robot can be described through rotation and translation. Rotations, however, do not belong to the vector space: we are not allowed to sum the rotations or multiply them by a scalar, because the resulting element will not belong to SO(3) group.</description></item><item><title>Point cloud alignment and SVD</title><link>https://mikoff.github.io/posts/point-cloud-alignment.md/</link><pubDate>Wed, 24 Jun 2020 18:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/point-cloud-alignment.md/</guid><description>Point cloud alignment and SVD Singular value decomposition Recently I studied the problem of finding the rotation and translation between two point sets and decided to write the post about it. The key here is singular value decomposition, or SVD.
It is extremely popular technique in many types of linear problems. It should be not surprised, that the point cloud alignment problem can be solved with its help. My aim here is to show all accommpanying theory and provide the point cloud alignment algorithm that takes not more than 10 lines of code in Python.</description></item><item><title>Nonlinear estimation: Full Bayesian, MLE and MAP</title><link>https://mikoff.github.io/posts/nonlinear-estimation-mle-map.md/</link><pubDate>Sat, 18 Apr 2020 10:51:21 +0300</pubDate><guid>https://mikoff.github.io/posts/nonlinear-estimation-mle-map.md/</guid><description>Intro Recently I have read &amp;ldquo;State Estimation for Robotics&amp;rdquo; book and came across a good example on one-dimensional nonlinear estimation problem: the estimation of the position of a landmark from stereo-camera data.
Distance from stereo-images The camera image is a projection of the world on the image plane. The depth perceptions arises from disparity of 3d point (landmark) on two images, obtained from left and right cameras. $$disparity = x_{left} - x_{right}$$</description></item><item><title>EKF SLAM</title><link>https://mikoff.github.io/posts/ekf-slam.md/</link><pubDate>Thu, 09 Apr 2020 21:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/ekf-slam.md/</guid><description>Introduction One of the most fundamental problems in robotics is the simultaneous localization and mapping (SLAM) problem.
It is more difficult than localization in that the map is unknown and has to be estimated along the way. It is more difficult than mapping with known poses, since the poses are unknown and have to be estimated along the way.
&amp;ndash; S. Thrun In the following post I would like to discuss the EKF SLAM and highlight the important aspects of its implementation and convergence.</description></item><item><title>Particle Filter: localizing the robot</title><link>https://mikoff.github.io/posts/particle-filter.md/</link><pubDate>Tue, 31 Mar 2020 19:59:26 +0300</pubDate><guid>https://mikoff.github.io/posts/particle-filter.md/</guid><description>Particle filter In this post I would like to show the basic implementation of the Particle filter for robot localization using distance measurements to the known anchors, or landmarks. So why particle filter is so widely used? It&amp;rsquo;s widespread application lies in its versatile nature and universalism. The filter is able to:
Work with nonlinearities. Handle non-gaussian distributions. Easily fuse various information sources. Simulate the processes. My sample implementation takes less then 100 lines of Python code and can be found here.</description></item><item><title>Inverse transform sampling</title><link>https://mikoff.github.io/posts/inverse-transform-sampling.md/</link><pubDate>Sun, 09 Feb 2020 14:56:13 +0300</pubDate><guid>https://mikoff.github.io/posts/inverse-transform-sampling.md/</guid><description>Probability density and cumulative distribution functions Probability density function $f(x)$ is a function, which allows us to evaluate the probability that the sample, drawn from the distribution, will be equal to the value $X$. Also we can use PDF to calculate the probability that the randomly drawn sample from distribution will be in certain range, for example, $a \leq X \leq b$. This probability equals to the area under the PDF curve on the given interval and can be calculated by integration: $$ P(a \leq X \leq b) = \int _a^b f(x) dx $$</description></item><item><title>Documenting the experience</title><link>https://mikoff.github.io/posts/documenting-the-experience/</link><pubDate>Sun, 09 Feb 2020 12:53:51 +0300</pubDate><guid>https://mikoff.github.io/posts/documenting-the-experience/</guid><description>Hi there! For every engineer and developer the continious self-studying is a must. Everyday we read, try to solve problems and clarify the concepts, write the code and visualise the things, which help us to get an insights.
I am interested in Navigation and Positioning, Statistics, Autonomous vehicles and Robotics. These topics are huge, and what is more important, they are about future of humanity.
To summarize all the things, which I am doing and share the ideas I decided to post about it.</description></item></channel></rss>