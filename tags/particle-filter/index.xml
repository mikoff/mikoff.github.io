<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Particle Filter on Aleksandr Mikoff's blog</title><link>https://mikoff.github.io/tags/particle-filter/</link><description>Recent content in Particle Filter on Aleksandr Mikoff's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Aug 2023 23:00:00 +0300</lastBuildDate><atom:link href="https://mikoff.github.io/tags/particle-filter/index.xml" rel="self" type="application/rss+xml"/><item><title>Likelihood and probability normalization, log-sum-exp trick</title><link>https://mikoff.github.io/posts/likelihood-and-log-sum-exp/</link><pubDate>Fri, 11 Aug 2023 23:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/likelihood-and-log-sum-exp/</guid><description>Working with probabilities involves multiplication and normalization of their values. Since the numerical values sometimes are extremely low that can lead to underflow problems. This problem is evident with particle filters - we have to multiply really low likelihood values that vanish in the end. Log-sum-exp allows to abbreviate this problem.
Approach Log-likelihoods Since the likelihood values can be extremely low it is more convenient to work with loglikelihood instead of likelihood: $$ \log(\mathcal{L}).</description></item><item><title>Particle Filter: localizing the robot</title><link>https://mikoff.github.io/posts/particle-filter.md/</link><pubDate>Tue, 31 Mar 2020 19:59:26 +0300</pubDate><guid>https://mikoff.github.io/posts/particle-filter.md/</guid><description>Particle filter In this post I would like to show the basic implementation of the Particle filter for robot localization using distance measurements to the known anchors, or landmarks. So why particle filter is so widely used? It&amp;rsquo;s widespread application lies in its versatile nature and universalism. The filter is able to:
Work with nonlinearities. Handle non-gaussian distributions. Easily fuse various information sources. Simulate the processes. My sample implementation takes less then 100 lines of Python code and can be found here.</description></item></channel></rss>