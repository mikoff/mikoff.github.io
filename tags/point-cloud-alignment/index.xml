<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Point cloud alignment on Aleksandr Mikoff's blog</title><link>https://mikoff.github.io/tags/point-cloud-alignment/</link><description>Recent content in Point cloud alignment on Aleksandr Mikoff's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2020 19:30:00 +0300</lastBuildDate><atom:link href="https://mikoff.github.io/tags/point-cloud-alignment/index.xml" rel="self" type="application/rss+xml"/><item><title>Point cloud alignment using Lie algebra machinery</title><link>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</link><pubDate>Mon, 27 Jul 2020 19:30:00 +0300</pubDate><guid>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</guid><description>Point cloud alignment using Lie algebra machinery Special Orthogonal group and vectorspaces Today I would like to cover the importance of Lie groups to the problems, that often arises in robotics field. The pose of the robot can be described through rotation and translation. Rotations, however, do not belong to the vector space: we are not allowed to sum the rotations or multiply them by a scalar, because the resulting element will not belong to SO(3) group.</description></item><item><title>Point cloud alignment and SVD</title><link>https://mikoff.github.io/posts/point-cloud-alignment.md/</link><pubDate>Wed, 24 Jun 2020 18:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/point-cloud-alignment.md/</guid><description>Point cloud alignment and SVD Singular value decomposition Recently I studied the problem of finding the rotation and translation between two point sets and decided to write the post about it. The key here is singular value decomposition, or SVD.
It is extremely popular technique in many types of linear problems. It should be not surprised, that the point cloud alignment problem can be solved with its help. My aim here is to show all accommpanying theory and provide the point cloud alignment algorithm that takes not more than 10 lines of code in Python.</description></item></channel></rss>