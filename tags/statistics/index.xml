<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Statistics on Aleksandr Mikoff's blog</title><link>https://mikoff.github.io/tags/statistics/</link><description>Recent content in Statistics on Aleksandr Mikoff's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Mar 2024 21:00:00 +0300</lastBuildDate><atom:link href="https://mikoff.github.io/tags/statistics/index.xml" rel="self" type="application/rss+xml"/><item><title>MCMC sampling</title><link>https://mikoff.github.io/posts/mcmc-sampling.md/</link><pubDate>Sun, 24 Mar 2024 21:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/mcmc-sampling.md/</guid><description>Quite often we want to sample from distributions that have computationally untractable CDF. To draw samples from them the numerical procedures are used. In the following note I would like to demonstrate few approaches for one particular example: having 2D robot perception and a map we want to sample most probable poses of this robot. This problem often emerges during initialization or re-initialization of the estimated robot pose when the filter diverged or needs to be initialized from scratch and we want to guarantee the fast convergence.</description></item><item><title>Nonlinear estimation: Full Bayesian, MLE and MAP</title><link>https://mikoff.github.io/posts/nonlinear-estimation-mle-map.md/</link><pubDate>Sat, 18 Apr 2020 10:51:21 +0300</pubDate><guid>https://mikoff.github.io/posts/nonlinear-estimation-mle-map.md/</guid><description>Intro Link to heading Recently I have read &amp;ldquo;State Estimation for Robotics&amp;rdquo; book and came across a good example on one-dimensional nonlinear estimation problem: the estimation of the position of a landmark from stereo-camera data.
Distance from stereo-images Link to heading The camera image is a projection of the world on the image plane. The depth perceptions arises from disparity of 3d point (landmark) on two images, obtained from left and right cameras.</description></item><item><title>Inverse transform sampling</title><link>https://mikoff.github.io/posts/inverse-transform-sampling.md/</link><pubDate>Sun, 09 Feb 2020 14:56:13 +0300</pubDate><guid>https://mikoff.github.io/posts/inverse-transform-sampling.md/</guid><description>Probability density and cumulative distribution functions Link to heading Probability density function $f(x)$ is a function, which allows us to evaluate the probability that the sample, drawn from the distribution, will be equal to the value $X$. Also we can use PDF to calculate the probability that the randomly drawn sample from distribution will be in certain range, for example, $a \leq X \leq b$. This probability equals to the area under the PDF curve on the given interval and can be calculated by integration: $$ P(a \leq X \leq b) = \int _a^b f(x) dx $$ Cumulative distribution function shows us the probability (portion of data, frequence) to draw a number $X$ less or equal than $x$: $$ P(X \leq x) = F(x).</description></item></channel></rss>