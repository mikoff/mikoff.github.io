<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lie algebra on Aleksandr Mikoff's blog</title><link>https://mikoff.github.io/tags/lie-algebra/</link><description>Recent content in Lie algebra on Aleksandr Mikoff's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Nov 2021 23:00:00 +0300</lastBuildDate><atom:link href="https://mikoff.github.io/tags/lie-algebra/index.xml" rel="self" type="application/rss+xml"/><item><title>Uncertainty propogation with and without Lie groups</title><link>https://mikoff.github.io/posts/uncertainty-propagation.md/</link><pubDate>Thu, 04 Nov 2021 23:00:00 +0300</pubDate><guid>https://mikoff.github.io/posts/uncertainty-propagation.md/</guid><description>Uncertainty propogation with and without Lie groups and algebras The correct uncertainty estimation of the pose is crucial for any navigation or positioning algorithm performance. One of the most natural way of representing the uncertainty for me is the confidence ellipse.
In the following post I would like to show effect of the uncertainty propogation using the various algorithms. What&amp;rsquo;s more important, I would like to show the Gaussians representations both in cartesian and exponential coordinates.</description></item><item><title>Point cloud alignment using Lie algebra machinery</title><link>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</link><pubDate>Mon, 27 Jul 2020 19:30:00 +0300</pubDate><guid>https://mikoff.github.io/posts/point-cloud-alignment-and-lie-algebra.md/</guid><description>Point cloud alignment using Lie algebra machinery Special Orthogonal group and vectorspaces Today I would like to cover the importance of Lie groups to the problems, that often arises in robotics field. The pose of the robot can be described through rotation and translation. Rotations, however, do not belong to the vector space: we are not allowed to sum the rotations or multiply them by a scalar, because the resulting element will not belong to SO(3) group.</description></item></channel></rss>